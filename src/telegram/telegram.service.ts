import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';
import { Telegraf, Telegram } from 'telegraf';
import { InjectBot } from 'nestjs-telegraf';
import { createReadStream } from 'fs';
import {
  InlineKeyboardMarkup,
  InputMediaPhoto,
  Message,
} from 'telegraf/typings/core/types/typegram';
import { Channel } from 'src/channel/entities/channel.entity';
import { Contest } from 'src/contest/entities/contest.entity';
import path from 'path';
// import path from 'path';

type TextMessage = Message.TextMessage;
type PhotoMessage = Message.PhotoMessage;

@Injectable()
export class TelegramService {
  private readonly logger = new Logger(TelegramService.name);

  constructor(@InjectBot() private readonly bot: Telegraf<any>) {}

  async sendPosts(
    chatIds: string | string[],
    text: string,
    photoUrl?: string,
    contestId?: number,
    groupId?: string,
    buttonText?: string,
  ): Promise<{ chatId: string; messageId: number }[]> {
    const chatIdsArray = Array.isArray(chatIds)
      ? [...new Set(chatIds)]
      : [...new Set(chatIds.split(',').map((id) => id.trim()))];

    this.logger.log(
      `–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤ –≤ —á–∞—Ç—ã: ${chatIdsArray.join(', ')}, contestId=${contestId}, groupId=${groupId}`,
    );

    const webAppUrl = `https://t.me/my_test_contest_bot/apprandom?startapp=${groupId}_${contestId}`;

    const promises = chatIdsArray.map(async (chatId) => {
      try {
        let sentMessage: Message.PhotoMessage | Message.TextMessage;

        if (photoUrl) {
          const img = createReadStream(`.${photoUrl}`);
          const options: Parameters<Telegram['sendPhoto']>[2] = {
            caption: text,
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [{ text: buttonText ?? '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', url: webAppUrl }],
              ],
            },
          };
          sentMessage = await this.bot.telegram.sendPhoto(
            chatId,
            { source: img },
            options,
          );
        } else {
          sentMessage = await this.bot.telegram.sendMessage(chatId, text, {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [{ text: buttonText ?? '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', url: webAppUrl }],
              ],
            },
          });
        }

        this.logger.log(
          `–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}, messageId=${sentMessage.message_id}`,
        );
        return { chatId, messageId: sentMessage.message_id };
      } catch (err) {
        this.logger.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}: ${err.message}`,
          err.stack,
        );
        throw new HttpException(
          '–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–æ–≤',
          HttpStatus.INTERNAL_SERVER_ERROR,
        );
      }
    });

    return Promise.all(promises);
  }

  async deleteMessage(chatId: string, messageId: number) {
    try {
      this.logger.log(`–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –∏–∑ —á–∞—Ç–∞ ${chatId}`);
      await this.bot.telegram.deleteMessage(chatId, messageId);
    } catch (err) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –∏–∑ —á–∞—Ç–∞ ${chatId}: ${err.message}`,
        err.stack,
      );
      throw new HttpException(
        '–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ –∏ —á–∞—Ç–æ–≤',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  async getChatInfo(usernameOrId: string) {
    try {
      this.logger.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ ${usernameOrId}`);
      return await this.bot.telegram.getChat(usernameOrId);
    } catch (err) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ ${usernameOrId}: ${err.message}`,
        err.stack,
      );
      throw new HttpException(
        '–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  async isUserSubscribed(chats: Channel[], telegramId: number) {
    this.logger.log(
      `–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –≤ ${chats.length} —á–∞—Ç–∞—Ö`,
    );
    const results: { chat: string; subscribed: boolean }[] = [];

    for (const chat of chats) {
      try {
        const member = await this.bot.telegram.getChatMember(
          chat.telegramId,
          telegramId,
        );

        const subscribed = ['member', 'administrator', 'creator'].includes(
          member.status,
        );
        results.push({ chat: chat.telegramName, subscribed });
      } catch (err) {
        this.logger.warn(
          `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —á–∞—Ç–µ ${chat.telegramId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}: ${err.message}`,
        );
        results.push({ chat: chat.telegramName, subscribed: false });
      }
    }

    const unsub = results.filter((r) => !r.subscribed).map((r) => r.chat);
    if (unsub.length) {
      const msg = `–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ ${unsub.join(', ')}`;
      this.logger.warn(msg);
      throw new HttpException(msg, HttpStatus.CONFLICT);
    }

    return results;
  }

  async sendPrivateMessage(
    telegramId: number | string,
    text: string,
    channelUsername: string,
    messageId: string,
  ): Promise<Message.TextMessage | Message.PhotoMessage> {
    try {
      this.logger.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}`);
      return await this.bot.telegram.sendMessage(telegramId, text, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–Ω–∫—É—Ä—Å—É üé≤',
                url: `https://t.me/${channelUsername}/${messageId}`,
              },
            ],
          ],
        },
      });
    } catch (err) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}: ${err.message}`,
        err.stack,
      );
      throw new HttpException(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  // async editPost(
  //   channelId: string,
  //   messageId: number,
  //   contest: Contest,
  //   newText?: string,
  //   newImageUrl?: string,
  //   buttonText?: string,
  // ): Promise<Message.TextMessage | Message.PhotoMessage | true | undefined> {
  //   try {
  //     this.logger.log(
  //       `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ ${messageId} –≤ –∫–∞–Ω–∞–ª–µ ${channelId}`,
  //     );
  //     const webAppUrl = `https://t.me/my_test_contest_bot/apprandom?startapp=${channelId}_${contest.id}`;
  //     const inlineKeyboard: InlineKeyboardMarkup = {
  //       inline_keyboard: [
  //         [{ text: buttonText ?? contest.buttonText, url: webAppUrl }],
  //       ],
  //     };
  //
  //     // –ï—Å–ª–∏ –º–µ–Ω—è–µ—Ç—Å—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º editMessageMedia
  //     if (newImageUrl) {
  //       this.logger.log(`–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}`);
  //       const media: InputMediaPhoto = {
  //         type: 'photo',
  //         media: newImageUrl, // URL –∏–ª–∏ File ID
  //         caption: newText ?? contest.description,
  //         parse_mode: 'HTML',
  //       };
  //
  //       const edited = await this.bot.telegram.editMessageMedia(
  //         Number(channelId),
  //         messageId,
  //         undefined,
  //         media,
  //         { reply_markup: inlineKeyboard },
  //       );
  //
  //       this.logger.log(`–§–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
  //       return edited as unknown as Message.PhotoMessage | true;
  //     }
  //
  //     // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–Ω–æ–ø–∫–∞
  //     if (newText) {
  //       this.logger.log(`–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}`);
  //       const edited = await this.bot.telegram.editMessageCaption(
  //         Number(channelId),
  //         messageId,
  //         undefined,
  //         newText,
  //         { parse_mode: 'HTML', reply_markup: inlineKeyboard },
  //       );
  //
  //       this.logger.log(`–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –æ–±–Ω–æ–≤–ª—ë–Ω`);
  //       return edited as unknown as Message.TextMessage | true | undefined;
  //     }
  //
  //     // if (buttonText) {
  //     //   this.logger.log(`–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}`);
  //     //   const edited = await this.bot.telegram.editMessageReplyMarkup(
  //     //     Number(channelId),
  //     //     messageId,
  //     //     undefined,
  //     //     inlineKeyboard,
  //     //   );
  //
  //     //   this.logger.log(`–ö–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –æ–±–Ω–æ–≤–ª–µ–Ω—ã`);
  //     //   return edited as unknown as Message.TextMessage | true | undefined;
  //     // }
  //
  //     this.logger.log(`–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}`);
  //     return undefined;
  //   } catch (err) {
  //     this.logger.error(
  //       `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞ ${messageId} –≤ –∫–∞–Ω–∞–ª–µ ${channelId}: ${err.message}`,
  //       err.stack,
  //     );
  //     throw new HttpException(
  //       '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ',
  //       HttpStatus.INTERNAL_SERVER_ERROR,
  //     );
  //   }
  // }

  // async editPost(
  //   channelId: string,
  //   messageId: number,
  //   contest: Contest,
  //   newText?: string,
  //   buttonText?: string,
  // ) {
  //   try {
  //     this.logger.log(
  //       `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ ${messageId} –≤ –∫–∞–Ω–∞–ª–µ ${channelId}`,
  //     );
  //     // const webAppUrl = `https://t.me/my_test_contest_bot/apprandom?startapp=finished${contestId}`;
  //     const oldWebAppUrl = `https://t.me/my_test_contest_bot/apprandom?startapp=${channelId}_${contest.id}`;
  //
  //     const keyboard: InlineKeyboardMarkup = {
  //       inline_keyboard: [[{ text: '–ö–æ–Ω–∫—É—Ä—Å –æ–∫–æ–Ω—á–µ–Ω üé≤', url: oldWebAppUrl }]],
  //     };
  //     const oldButton = {
  //       inline_keyboard: [
  //         [{ text: buttonText ?? contest.buttonText, url: oldWebAppUrl }],
  //       ],
  //     };
  //
  //     if (newText) {
  //       return (await this.bot.telegram.editMessageCaption(
  //         Number(channelId),
  //         messageId,
  //         undefined,
  //         newText,
  //         {
  //           parse_mode: 'HTML',
  //           reply_markup: oldButton,
  //         },
  //       )) as Message.TextMessage | true | undefined;
  //     }
  //
  //     return (await this.bot.telegram.editMessageReplyMarkup(
  //       channelId,
  //       messageId,
  //       undefined,
  //       keyboard,
  //     )) as Message.TextMessage | true | undefined;
  //   } catch (err) {
  //     this.logger.error(
  //       `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞ ${messageId} –≤ –∫–∞–Ω–∞–ª–µ ${channelId}: ${err.message}`,
  //       err.stack,
  //     );
  //     throw new HttpException(
  //       '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ',
  //       HttpStatus.INTERNAL_SERVER_ERROR,
  //     );
  //   }
  // }

  // async editPost(
  //   channelId: string,
  //   messageId: number,
  //   contest: Contest,
  //   newText?: string,
  //   buttonText?: string,
  // ) {
  //   try {
  //     this.logger.log(
  //       `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ ${messageId} –≤ –∫–∞–Ω–∞–ª–µ ${channelId}`,
  //     );

  //     const oldWebAppUrl = `https://t.me/my_test_contest_bot/apprandom?startapp=${channelId}_${contest.id}`;

  //     const keyboard: InlineKeyboardMarkup = {
  //       inline_keyboard: [[{ text: '–ö–æ–Ω–∫—É—Ä—Å –æ–∫–æ–Ω—á–µ–Ω üé≤', url: oldWebAppUrl }]],
  //     };

  //     const oldButton = {
  //       inline_keyboard: [
  //         [{ text: buttonText ?? contest.buttonText, url: oldWebAppUrl }],
  //       ],
  //     };

  //     if (newText) {
  //       if (contest?.imageUrl) {
  //         // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—à—å, —á—Ç–æ —ç—Ç–æ —Ñ–æ—Ç–æ —Å caption ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π editMessageCaption
  //         return (await this.bot.telegram.editMessageCaption(
  //           Number(channelId),
  //           messageId,
  //           undefined,
  //           newText,
  //           {
  //             parse_mode: 'HTML',
  //             reply_markup: oldButton,
  //           },
  //         )) as Message.TextMessage | true | undefined;
  //       } else {
  //         // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç
  //         return (await this.bot.telegram.editMessageText(
  //           Number(channelId),
  //           messageId,
  //           undefined,
  //           newText,
  //           {
  //             parse_mode: 'HTML',
  //             reply_markup: oldButton,
  //           },
  //         )) as Message.TextMessage | true | undefined;
  //       }
  //     }

  //     return (await this.bot.telegram.editMessageReplyMarkup(
  //       Number(channelId),
  //       messageId,
  //       undefined,
  //       keyboard,
  //     )) as Message.TextMessage | true | undefined;
  //   } catch (err) {
  //     this.logger.error(
  //       `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞ ${messageId} –≤ –∫–∞–Ω–∞–ª–µ ${channelId}: ${err.message}`,
  //       err.stack,
  //     );
  //     throw new HttpException(
  //       '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ',
  //       HttpStatus.INTERNAL_SERVER_ERROR,
  //     );
  //   }
  // }

  async editPost(
    channelId: string,
    messageId: number,
    contest: Contest,
    newName?: string,
    newText?: string,
    newImageUrl?: string,
    buttonText?: string,
  ): Promise<TextMessage | PhotoMessage | true | undefined> {
    const webAppUrl = `https://t.me/my_test_contest_bot/apprandom?startapp=${channelId}_${contest.id}`;
    const inlineKeyboard: InlineKeyboardMarkup = {
      inline_keyboard: [
        [
          {
            text: buttonText ?? contest.buttonText ?? '–£—á–∞—Å—Ç–≤—É—é! üéâ',
            url: webAppUrl,
          },
        ],
      ],
    };

    try {
      this.logger.log(
        `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ ${messageId} –≤ –∫–∞–Ω–∞–ª–µ ${channelId}`,
      );
      console.log(newImageUrl);

      let result: unknown;

      if (newImageUrl) {
        this.logger.log(`–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}`);
        const media: InputMediaPhoto = {
          type: 'photo',
          media: { source: createReadStream(`.${newImageUrl}`) }, // URL –∏–ª–∏ file_id
          caption: newText ?? contest.description,
          parse_mode: 'HTML',
        };

        await this.bot.telegram.editMessageMedia(
          Number(channelId),
          messageId,
          undefined,
          media,
          { reply_markup: inlineKeyboard },
        );

        this.logger.log(`–§–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
      } else if (newText) {
        // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ —Å caption
        if (contest?.imageUrl) {
          this.logger.log(`–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}`);
          result = await this.bot.telegram.editMessageCaption(
            Number(channelId),
            messageId,
            undefined,
            `${contest.name}/n/n${newText}`,
            { parse_mode: 'HTML', reply_markup: inlineKeyboard },
          );
        } else {
          // –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          this.logger.log(`–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}`);
          result = await this.bot.telegram.editMessageText(
            Number(channelId),
            messageId,
            undefined,
            `${contest.name}/n/n${newText}`,
            { parse_mode: 'HTML', reply_markup: inlineKeyboard },
          );
        }
        this.logger.log(`–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –æ–±–Ω–æ–≤–ª—ë–Ω`);
      }
      if (newName) {
        if (contest?.imageUrl) {
          this.logger.log(`–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}`);
          result = await this.bot.telegram.editMessageCaption(
            Number(channelId),
            messageId,
            undefined,
            `${newName}/n/n${contest?.description}`,
            { parse_mode: 'HTML', reply_markup: inlineKeyboard },
          );
        } else {
          // –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          this.logger.log(`–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}`);
          result = await this.bot.telegram.editMessageText(
            Number(channelId),
            messageId,
            undefined,
            `${newName}/n/n${contest?.description}`,
            { parse_mode: 'HTML', reply_markup: inlineKeyboard },
          );
        }
      } else if (buttonText) {
        // –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        this.logger.log(`–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}`);
        const replyMarkup =
          buttonText === 'none' ? { inline_keyboard: [] } : inlineKeyboard;

        result = await this.bot.telegram.editMessageReplyMarkup(
          Number(channelId),
          messageId,
          undefined,
          replyMarkup,
        );
        this.logger.log(`–ö–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –æ–±–Ω–æ–≤–ª–µ–Ω—ã`);
      } else {
        this.logger.log(`–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}`);
        result = undefined;
      }

      return result as TextMessage | PhotoMessage | true | undefined;
    } catch (err) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞ ${messageId} –≤ –∫–∞–Ω–∞–ª–µ ${channelId}: ${err.message}`,
        err.stack,
      );
      throw new HttpException(
        '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  async isBotAdmin(channel: Channel): Promise<boolean> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º–æ–º –±–æ—Ç–µ
      const botInfo = await this.bot.telegram.getMe();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ
      const member = await this.bot.telegram.getChatMember(
        channel.telegramId,
        botInfo.id,
      );

      const isAdmin = ['administrator', 'creator'].includes(member.status);

      this.logger.log(
        `–ë–æ—Ç ${botInfo.username} —è–≤–ª—è–µ—Ç—Å—è ${
          isAdmin ? '' : '–Ω–µ '
        }–∞–¥–º–∏–Ω–æ–º –≤ —á–∞—Ç–µ ${channel.telegramName}`,
      );

      return isAdmin;
    } catch (err) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ ${channel.telegramName}: ${err.message}`,
        err.stack,
      );
      throw new HttpException(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }
}
