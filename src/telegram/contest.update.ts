import { Update, Start, Command, Ctx, On, Action } from 'nestjs-telegraf';
import { Context } from 'telegraf';
import { Injectable, Logger } from '@nestjs/common';
import { UsersService } from 'src/users/users.service';
import { ContestService } from 'src/contest/contest.service';
import { ContestParticipationService } from 'src/contest-participation/contest-participation.service';
import { Message, ParseMode } from 'telegraf/typings/core/types/typegram';
import { TelegramService } from './telegram.service';

interface CreateContestSession {
  step?: 'name' | 'description';
  name?: string;
  description?: string;
  scheduledContestId?: number;
}

@Update()
@Injectable()
export class ContestUpdate {
  private readonly logger = new Logger(ContestUpdate.name);

  constructor(
    private readonly userService: UsersService,
    private readonly contestService: ContestService,
    private readonly contestParticipationService: ContestParticipationService,
    private readonly telegramService: TelegramService,
  ) {}

  @Start()
  async start(@Ctx() ctx: Context) {
    const tgUser = ctx.from;
    const chatId = ctx.chat?.id;

    this.logger.log(
      `Bot started by chatId=${chatId}, user=${tgUser?.username}`,
    );

    if (tgUser) {
      await this.userService.findOrCreate({
        telegramId: tgUser.id,
        userName: tgUser.username || '',
      });

      await ctx.reply(
        `–ü—Ä–∏–≤–µ—Ç, ${tgUser.first_name || '–¥—Ä—É–≥'}!\n` +
          `ID —á–∞—Ç–∞: ${chatId}\n` +
          `–î–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–æ–≤: /contests`,
      );
    } else if (ctx.channelPost) {
      const channelId = ctx.channelPost.chat.id;
      this.logger.log(`Channel post detected, channelId=${channelId}`);
      await ctx.reply(`ID —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞: ${channelId}`);
    } else {
      this.logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –∏–ª–∏ –∫–∞–Ω–∞–ª');
      await ctx.reply(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –∏–ª–∏ –∫–∞–Ω–∞–ª üòï',
      );
    }
  }

  @Command('contests')
  async list(@Ctx() ctx: Context) {
    this.logger.log('–ö–æ–º–∞–Ω–¥–∞ /contests –≤—ã–∑–≤–∞–Ω–∞');
    const contests = await this.contestService.getActiveContests();
    if (!contests.length) return ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤');

    let msg = 'üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã:\n\n';
    contests.forEach(
      (c) => (msg += `ID: ${c.id} ‚Äî ${c.name}\n${c.description || ''}\n\n`),
    );
    msg += '–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å: /participate <id>';

    await ctx.reply(msg);
  }

  @Command('createcontest')
  async startCreate(@Ctx() ctx: Context & { session: CreateContestSession }) {
    this.logger.log('–ù–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞');
    ctx.session = { step: 'name' };
    await ctx.reply('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞:');
  }

  @On('text')
  async handleCreate(@Ctx() ctx: Context & { session?: CreateContestSession }) {
    const message = ctx.message as Message.TextMessage;
    const text = message.text?.trim();
    if (!text) return;

    this.logger.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${text}`);

    if (ctx.session?.step) {
      switch (ctx.session.step) {
        case 'name':
          ctx.session.name = text;
          ctx.session.step = 'description';
          this.logger.log(`–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${text}`);
          await ctx.reply('üìÑ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞:');
          return;

        case 'description': {
          ctx.session.description = text;
          this.logger.log(`–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${text}`);

          if (!ctx.session.name) {
            this.logger.warn('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ');
            await ctx.reply(
              '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /createcontest',
            );
            ctx.session = {};
            return;
          }

          const contest = await this.contestService.createContest({
            name: ctx.session.name,
            description: ctx.session.description,
            endDate: new Date(),
            creatorId: 0,
            buttonText: '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å',
          });

          this.logger.log(
            `–°–æ–∑–¥–∞–Ω –∫–æ–Ω–∫—É—Ä—Å id=${contest.id}, name=${contest.name}`,
          );

          const postText = `üéâ –ù–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å!\n\n<b>${contest.name}</b>\n\n${contest.description}`;
          await ctx.reply(postText, {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å',
                    callback_data: `publish_${contest.id}`,
                  },
                  {
                    text: '‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å',
                    callback_data: `schedule_${contest.id}`,
                  },
                ],
              ],
            },
          });

          ctx.session = {};
          return;
        }
      }
    }
  }

  @Action(/publish_(.+)/)
  async publish(@Ctx() ctx: Context & { match?: RegExpExecArray }) {
    if (!ctx.match) return await ctx.answerCbQuery('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');

    const contestId = Number(ctx.match[1]);
    this.logger.log(`–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ id=${contestId}`);

    const contest = await this.contestService.getContestById(contestId);

    if (!contest) {
      this.logger.warn(`–ö–æ–Ω–∫—É—Ä—Å id=${contestId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return await ctx.answerCbQuery('‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    contest.status = 'active';
    await this.contestService.saveContest(contest);

    await ctx.reply(`‚úÖ –ö–æ–Ω–∫—É—Ä—Å "${contest.name}" –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!`);
    await ctx.answerCbQuery('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!');
  }

  @Action(/schedule_(.+)/)
  async schedule(
    @Ctx()
    ctx: Context & { match?: RegExpExecArray; session?: CreateContestSession },
  ) {
    const contestId = Number(ctx.match?.[1]);
    this.logger.log(`–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ id=${contestId}`);

    const contest = await this.contestService.getContestById(contestId);
    if (!contest) {
      this.logger.warn(`–ö–æ–Ω–∫—É—Ä—Å id=${contestId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return await ctx.answerCbQuery('‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    contest.status = 'pending';
    await this.contestService.saveContest(contest);

    ctx.session = { scheduledContestId: contest.id };

    await ctx.answerCbQuery('‚è∞ –ö–æ–Ω–∫—É—Ä—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!');
    await ctx.reply(
      'üìÖ –£–∫–∞–∂–∏ –¥–∞—Ç—É/–≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:mm (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-08-25 18:00)',
    );
  }
}
